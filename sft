from functools import reduce
import unittest
import time


def test_mapReduce():
    def fn(x, y):
        return x * 10 + y

    def fn1(x):
        return x * 10

    print(reduce(fn, [2, 2, 2]))
    print(list(map(fn1, [1, 3, 5, 7, 9])))


def test_collections():
    import collections
    point = collections.namedtuple('point', 'x,y')
    p = point(1, 2)
    print(p.x)
    print(p.y)
    print(p[0])
    print(p[1])

# 缓存剔除机制
def test_LRUCache():
    '''
    实现LRUCache
        Least-Recently-Used替换掉最近最少使用的对象
        缓存剔除策略，当缓存控件不够用的时候需要一种方式剔除key
        常见的有LRU，LFU等
        LRU通过使用一个循环双端队列不断把最新访问的key放到表头实现
    :return:
    '''

    class LRUCache:
        def __init__(self, capacity=128):
            from collections import OrderedDict
            self.od = OrderedDict()
            self.capacity = capacity

        def get(self, key):  # 每次访问更新最新使用的key
            if key in self.od:
                val = self.od[key]
                self.od.move_to_end(key)  # 移动key最尾部（最右边）
                return val
            else:
                return -1

        def put(self, key, value):  # 更新 k/v
            if key in self.od:
                del self.od[key]
                self.od[key] = value  # 更新key到表头
            else:  # insert
                self.od[key] = value
                # 判断当前容量是否已经满了
                if len(self.od) > self.capacity:
                    self.od.popitem(last=False)  # 最早的key删除

    LRUC = LRUCache(22)
    print(LRUC.od)
    LRUC.put('name', 'haohao')
    print(LRUC.od)
    print(LRUC.get('name'))

# 链表反转算法 leecod206
def test_linkList():
    class ListNode:
        def __init__(self,x):
            self.val = x
            self.next = None
    class Soluion:
        def reverseList(self, head):
            pre = None
            cur = head
            while cur:
                nextnode = cur.next
                cur.next = pre
                pre = cur
                cur = nextnode
            return pre
    test = Soluion()
    n1 = ListNode(1)
    n1.next = ListNode(2)
    n1.next.next = ListNode(3)
    print(n1)
    print(test.reverseList(n1).val)

# 双端队列
def test_deque():
    from collections import deque
    class Queue:
        def __init__(self):
            self.item = deque()
        def append(self,val):
            return self.item.append(val)
        def pop(self):
            return self.item.popleft()
        def empty(self):
            return len(self.item) == 0
    q = Queue()
    q.append(0)
    q.append(1)
    q.append(2)
    print(q.pop())
    print(q.empty())
    print(q.pop())
    print(q.empty())
    print(q.pop())
    print(q.empty())


# 栈实现
def test_stack():
    from collections import deque

    class Stack():
        def __init__(self):
            self.deque = deque()
        def push(self, value):
            self.deque.append(value)
        def pop(self):
            return self.deque.pop()

# 二叉树的层序遍历
def test_levelOrder():
    class Solution:
        def levelOrder(self, root):
            if not root:
                return []
            res = []
            cur_nodes = [root]
            next_nodes = []
            res.append([i.val for i in cur_nodes])
            while cur_nodes or next_nodes:
                for node in cur_nodes:
                    if node.left:
                        next_nodes.append(node.left)
                    if node.right:
                        next_nodes.append(node.right)
                if next_nodes:
                    res.append(i.val for i in next_nodes)
                cur_nodes = next_nodes
                next_nodes = []
            return res

# 用栈实现队列 0407
def test_Stack():
    from collections import deque
    class Statck:
        def __init__(self):
            self.items = deque()
        def push(self,val):
            return self.items.append(val)
        def pop(self):
            return self.items.pop()
        def top(self):
            return self.items[-1]
        def empty(self):
            return len(self.items) ==0
    class MyQueue:
        def __init__(self):
            self.s1 = Statck()
            self.s2 = Statck()
        def push(self, x):
            self.s1.push(x)
        def pop(self):
            if not self.s2.empty():
                return self.s2.pop()
            while not self.s1.empty():
                val = self.s1.pop()
                self.s2.push(val)
            return self.s2.pop()
        def peek(self):
            if not self.s2.empty():
                return self.s2.top()
            while not self.s1.empty():
                val = self.s1.pop()
                self.s2.push(val)
            return self.s2.top()
        def empty(self):
            return self.s1.empty() and self.s2.empty()
    q = MyQueue()
    q.push(3)
    q.push(2)
    q.push(1)
    print(q.pop())
    print(q.pop())
    print(q.pop())





# 堆：合并k个有序链表
def test_mergeKlists():
    from heapq import  heapify
    class Solution:
        def mergeKLists(self, lists):
            # 读取所有节点值
            h = []
            for node in lists:
                while node:
                    h.append(node.val)
                    node = node.next
            # 构造一个最小堆
            heapify(h)  # 转换成最小堆

            # 构造链表

